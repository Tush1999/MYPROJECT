{"ast":null,"code":"var _jsxFileName = \"/home/tushar/Desktop/Vinsol/My Project/b/src/Components/Employees/AirTable.js\";\nimport React, { Component } from \"react\";\nimport Airtable from \"airtable\";\nimport ShowData from \"./ShowData\";\nimport \"./style.css\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst base = new Airtable({\n  apiKey: \"keyHHrGcNLiewGh05\"\n}).base(\"appnnQqeeXZmvVJvB\");\nexport default class AirTable extends Component {\n  constructor() {\n    super();\n\n    this.fetchData = () => {\n      console.log(this.state.search, \"prop\");\n      base(\"Imported table\").select({\n        view: \"Grid view\",\n        pageSize: 20\n      }).eachPage((records, fetchNextPage) => {\n        let array = records.map(record => ({\n          pName: record.fields[\"Participant Name\"],\n          pId: record.fields[\"Participant Identifier\"]\n        }));\n        this.setState({\n          data: [...array, ...this.state.data],\n          nextList: fetchNextPage,\n          arr: array\n        });\n      });\n    };\n\n    this.handleClick = () => {\n      this.state.nextList();\n    };\n\n    this.handleSearch = e => {\n      this.setState({\n        search: e.target.value\n      });\n    };\n\n    this.state = {\n      data: [],\n      nextList: \"\",\n      search: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate() {\n    console.log(\"updte\");\n    console.log(this.props.search, \"props\");\n    console.log(this.state.search, \"state\");\n\n    if (this.props.search !== this.state.search) {\n      this.setState({\n        search: this.props.search\n      });\n      this.fetchData();\n    }\n  }\n\n  render() {\n    //console.log(this.props.search,\"hedrdd\")\n    const result = [];\n    const map = new Map();\n\n    for (const item of this.state.data) {\n      if (!map.has(item.pName)) {\n        map.set(item.pName, true);\n        result.push({\n          pName: item.pName,\n          pId: item.pId\n        });\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          style: {\n            width: \"50%\"\n          },\n          className: \"form-control\",\n          type: \"search\",\n          value: this.state.search,\n          onChange: this.handleSearch,\n          placeholder: \"search here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"scrollableDiv\",\n        children: /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n          dataLength: this.state.data.length,\n          next: this.handleClick,\n          hasMore: true,\n          loader: true ? /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 28\n          }, this) : null,\n          children: /*#__PURE__*/_jsxDEV(ShowData, {\n            data: result\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}","map":{"version":3,"sources":["/home/tushar/Desktop/Vinsol/My Project/b/src/Components/Employees/AirTable.js"],"names":["React","Component","Airtable","ShowData","InfiniteScroll","base","apiKey","AirTable","constructor","fetchData","console","log","state","search","select","view","pageSize","eachPage","records","fetchNextPage","array","map","record","pName","fields","pId","setState","data","nextList","arr","handleClick","handleSearch","e","target","value","componentDidMount","componentDidUpdate","props","render","result","Map","item","has","set","push","width","length"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Airtable from \"airtable\";\nimport ShowData from \"./ShowData\";\nimport \"./style.css\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst base = new Airtable({ apiKey: \"keyHHrGcNLiewGh05\" }).base(\n  \"appnnQqeeXZmvVJvB\"\n);\nexport default class AirTable extends Component {\n  constructor() {\n    super();\n    this.state = { data: [], nextList: \"\",search:\"\" };\n  }\n  componentDidMount() {\n    this.fetchData();\n  }\n  componentDidUpdate(){\n    console.log(\"updte\")\n    console.log(this.props.search,\"props\")\n    console.log(this.state.search,\"state\")\n    if(this.props.search!==this.state.search){\n    this.setState({search:this.props.search})\n    this.fetchData()\n    }\n  }\n  fetchData = () => {\n    console.log(this.state.search, \"prop\");\n    base(\"Imported table\")\n      .select({\n        view: \"Grid view\",\n        pageSize: 20,\n      })\n      .eachPage((records, fetchNextPage) => {\n        let array = records.map((record) => ({\n          pName: record.fields[\"Participant Name\"],\n          pId: record.fields[\"Participant Identifier\"],\n        }));\n        this.setState({\n          data: [...array, ...this.state.data],\n          nextList: fetchNextPage,\n          arr: array,\n        });\n      });\n  };\n  handleClick = () => {\n    this.state.nextList();\n  };\n  handleSearch = (e) => {\n    this.setState({ search: e.target.value });\n  };\n\n  render() {\n    //console.log(this.props.search,\"hedrdd\")\n    const result = [];\n    const map = new Map();\n    for (const item of this.state.data) {\n      if (!map.has(item.pName)) {\n        map.set(item.pName, true);\n        result.push({\n          pName: item.pName,\n          pId: item.pId,\n        });\n      }\n    }\n    return (\n      <>\n        <div>\n          <input\n            style={{ width: \"50%\" }}\n            className=\"form-control\"\n            type=\"search\"\n            value={this.state.search}\n            onChange={this.handleSearch}\n            placeholder=\"search here\"\n          />\n        </div>\n        <div id=\"scrollableDiv\">\n          <InfiniteScroll\n            dataLength={this.state.data.length}\n            next={this.handleClick}\n            hasMore={true}\n            loader={true ? <h4>Loading...</h4> : null}\n          >\n            <ShowData data={result} />\n          </InfiniteScroll>\n        </div>\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}