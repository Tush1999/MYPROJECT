{"ast":null,"code":"var _jsxFileName = \"/home/tushar/Desktop/Vinsol/My Project/b/src/Components/Employees/AirTable.js\";\nimport React, { Component } from \"react\";\nimport Airtable from \"airtable\";\nimport ScrollTable from './ScrollTable';\nimport ShowData from \"./ShowData\";\nimport \"./style.css\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst base = new Airtable({\n  apiKey: \"keyHHrGcNLiewGh05\"\n}).base(\"appnnQqeeXZmvVJvB\");\nexport default class AirTable extends Component {\n  constructor() {\n    super();\n\n    this.fetchData = () => {\n      base(\"Imported table\").select({\n        view: \"Grid view\",\n        pageSize: 20\n      }).eachPage((records, fetchNextPage) => {\n        let array = records.map(record => ({\n          pName: record.fields[\"Participant Name\"],\n          pId: record.fields[\"Participant Identifier\"]\n        })); //console.log(records,\"last slot\")\n\n        this.setState({\n          data: [...array, ...this.state.data],\n          funct: fetchNextPage\n        });\n      });\n    };\n\n    this.handleClick = () => {\n      this.state.funct();\n    };\n\n    this.state = {\n      data: [],\n      funct: ''\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  render() {\n    const result = [];\n    const map = new Map();\n\n    for (const item of this.state.data) {\n      if (!map.has(item.pName)) {\n        map.set(item.pName, true);\n        result.push({\n          pName: item.pName,\n          pId: item.pId\n        });\n      }\n    } // var filteredData = result\n    //   .filter((val) =>\n    //   val.pName.toLowerCase().includes(this.state.searchField.toLowerCase())\n    //   )\n    //   .sort((a, b) => a.pName.localeCompare(b.pName));\n\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"scrollableDiv\",\n        children: /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n          dataLength: this.state.data.length,\n          next: this.handleClick,\n          hasMore: true,\n          loader: true ? /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 28\n          }, this) : null,\n          children: /*#__PURE__*/_jsxDEV(ShowData, {\n            data: result\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)\n    }, void 0, false);\n  }\n\n}","map":{"version":3,"sources":["/home/tushar/Desktop/Vinsol/My Project/b/src/Components/Employees/AirTable.js"],"names":["React","Component","Airtable","ScrollTable","ShowData","InfiniteScroll","base","apiKey","AirTable","constructor","fetchData","select","view","pageSize","eachPage","records","fetchNextPage","array","map","record","pName","fields","pId","setState","data","state","funct","handleClick","componentDidMount","render","result","Map","item","has","set","push","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,aAAP;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;;AAEA,MAAMC,IAAI,GAAG,IAAIJ,QAAJ,CAAa;AAAEK,EAAAA,MAAM,EAAE;AAAV,CAAb,EAA8CD,IAA9C,CACX,mBADW,CAAb;AAGA,eAAe,MAAME,QAAN,SAAuBP,SAAvB,CAAiC;AAChDQ,EAAAA,WAAW,GAAE;AACX;;AADW,SAObC,SAPa,GAOD,MAAM;AACdJ,MAAAA,IAAI,CAAC,gBAAD,CAAJ,CACGK,MADH,CACU;AACNC,QAAAA,IAAI,EAAE,WADA;AAENC,QAAAA,QAAQ,EAAE;AAFJ,OADV,EAKGC,QALH,CAKY,CAACC,OAAD,EAAUC,aAAV,KAA4B;AACpC,YAAIC,KAAK,GAAGF,OAAO,CAACG,GAAR,CAAaC,MAAD,KAAa;AACnCC,UAAAA,KAAK,EAAED,MAAM,CAACE,MAAP,CAAc,kBAAd,CAD4B;AAEnCC,UAAAA,GAAG,EAAEH,MAAM,CAACE,MAAP,CAAc,wBAAd;AAF8B,SAAb,CAAZ,CAAZ,CADoC,CAKpC;;AACA,aAAKE,QAAL,CAAc;AAACC,UAAAA,IAAI,EAAC,CAAC,GAAGP,KAAJ,EAAU,GAAG,KAAKQ,KAAL,CAAWD,IAAxB,CAAN;AAAoCE,UAAAA,KAAK,EAACV;AAA1C,SAAd;AAEL,OAbC;AAcH,KAtBY;;AAAA,SAuBbW,WAvBa,GAuBD,MAAI;AACd,WAAKF,KAAL,CAAWC,KAAX;AACD,KAzBY;;AAEX,SAAKD,KAAL,GAAW;AAACD,MAAAA,IAAI,EAAC,EAAN;AAASE,MAAAA,KAAK,EAAC;AAAf,KAAX;AACD;;AACDE,EAAAA,iBAAiB,GAAE;AACjB,SAAKlB,SAAL;AACD;;AAoBCmB,EAAAA,MAAM,GAAE;AACN,UAAMC,MAAM,GAAG,EAAf;AACA,UAAMZ,GAAG,GAAG,IAAIa,GAAJ,EAAZ;;AACA,SAAK,MAAMC,IAAX,IAAmB,KAAKP,KAAL,CAAWD,IAA9B,EAAoC;AAClC,UAAI,CAACN,GAAG,CAACe,GAAJ,CAAQD,IAAI,CAACZ,KAAb,CAAL,EAA0B;AACxBF,QAAAA,GAAG,CAACgB,GAAJ,CAAQF,IAAI,CAACZ,KAAb,EAAoB,IAApB;AACAU,QAAAA,MAAM,CAACK,IAAP,CAAY;AACVf,UAAAA,KAAK,EAAEY,IAAI,CAACZ,KADF;AAEVE,UAAAA,GAAG,EAAEU,IAAI,CAACV;AAFA,SAAZ;AAID;AACF,KAXK,CAYN;AACA;AACA;AACA;AACA;;;AACE,wBACA;AAAA,6BACI;AAAK,QAAA,EAAE,EAAC,eAAR;AAAA,+BACG,QAAC,cAAD;AACC,UAAA,UAAU,EAAE,KAAKG,KAAL,CAAWD,IAAX,CAAgBY,MAD7B;AAEC,UAAA,IAAI,EAAE,KAAKT,WAFZ;AAGC,UAAA,OAAO,EAAE,IAHV;AAIC,UAAA,MAAM,EAAE,oBAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAL,GAAyB,IAJlC;AAAA,iCAMC,QAAC,QAAD;AAAU,YAAA,IAAI,EAAEG;AAAhB;AAAA;AAAA;AAAA;AAAA;AAND;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA;AADJ,qBADA;AAaH;;AAzD6C","sourcesContent":["import React, { Component } from \"react\";\nimport Airtable from \"airtable\";\nimport ScrollTable from './ScrollTable'\nimport ShowData from \"./ShowData\";\nimport \"./style.css\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst base = new Airtable({ apiKey: \"keyHHrGcNLiewGh05\" }).base(\n  \"appnnQqeeXZmvVJvB\"\n);\nexport default class AirTable extends Component {\nconstructor(){\n  super();\n  this.state={data:[],funct:''}\n}\ncomponentDidMount(){\n  this.fetchData()\n}\nfetchData = () => {\n    base(\"Imported table\")\n      .select({\n        view: \"Grid view\",\n        pageSize: 20,\n      })\n      .eachPage((records, fetchNextPage) => {\n        let array = records.map((record) => ({\n          pName: record.fields[\"Participant Name\"],\n          pId: record.fields[\"Participant Identifier\"],\n        }));\n        //console.log(records,\"last slot\")\n        this.setState({data:[...array,...this.state.data],funct:fetchNextPage})\n        \n  })\n}\nhandleClick=()=>{\n  this.state.funct()\n}\n  render(){ \n    const result = [];\n    const map = new Map();\n    for (const item of this.state.data) {\n      if (!map.has(item.pName)) {\n        map.set(item.pName, true);\n        result.push({\n          pName: item.pName,\n          pId: item.pId,\n        });\n      }\n    }\n    // var filteredData = result\n    //   .filter((val) =>\n    //   val.pName.toLowerCase().includes(this.state.searchField.toLowerCase())\n    //   )\n    //   .sort((a, b) => a.pName.localeCompare(b.pName));\n      return (\n      <>\n          <div id=\"scrollableDiv\">\n             <InfiniteScroll\n              dataLength={this.state.data.length}\n              next={this.handleClick}\n              hasMore={true}\n              loader={true?<h4>Loading...</h4>:null}\n            >\n              <ShowData data={result} />\n            </InfiniteScroll> \n         </div>\n      </>)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}