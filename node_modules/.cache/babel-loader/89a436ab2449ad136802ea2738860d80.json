{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar isPlainObject_1 = __importDefault(require(\"lodash/isPlainObject\"));\n\nvar deprecate_1 = __importDefault(require(\"./deprecate\"));\n\nvar query_1 = __importDefault(require(\"./query\"));\n\nvar record_1 = __importDefault(require(\"./record\"));\n\nvar callback_to_promise_1 = __importDefault(require(\"./callback_to_promise\"));\n\nvar Table = function () {\n  function Table(base, tableId, tableName) {\n    if (!tableId && !tableName) {\n      throw new Error('Table name or table ID is required');\n    }\n\n    this._base = base;\n    this.id = tableId;\n    this.name = tableName; // Public API\n\n    this.find = callback_to_promise_1.default(this._findRecordById, this);\n    this.select = this._selectRecords.bind(this);\n    this.create = callback_to_promise_1.default(this._createRecords, this);\n    this.update = callback_to_promise_1.default(this._updateRecords.bind(this, false), this);\n    this.replace = callback_to_promise_1.default(this._updateRecords.bind(this, true), this);\n    this.destroy = callback_to_promise_1.default(this._destroyRecord, this); // Deprecated API\n\n    this.list = deprecate_1.default(this._listRecords.bind(this), 'table.list', 'Airtable: `list()` is deprecated. Use `select()` instead.');\n    this.forEach = deprecate_1.default(this._forEachRecord.bind(this), 'table.forEach', 'Airtable: `forEach()` is deprecated. Use `select()` instead.');\n  }\n\n  Table.prototype._findRecordById = function (recordId, done) {\n    var record = new record_1.default(this, recordId);\n    record.fetch(done);\n  };\n\n  Table.prototype._selectRecords = function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    if (arguments.length > 1) {\n      console.warn(\"Airtable: `select` takes only one parameter, but it was given \" + arguments.length + \" parameters. Use `eachPage` or `firstPage` to fetch records.\");\n    }\n\n    if (isPlainObject_1.default(params)) {\n      var validationResults = query_1.default.validateParams(params);\n\n      if (validationResults.errors.length) {\n        var formattedErrors = validationResults.errors.map(function (error) {\n          return \"  * \" + error;\n        });\n        throw new Error(\"Airtable: invalid parameters for `select`:\\n\" + formattedErrors.join('\\n'));\n      }\n\n      if (validationResults.ignoredKeys.length) {\n        console.warn(\"Airtable: the following parameters to `select` will be ignored: \" + validationResults.ignoredKeys.join(', '));\n      }\n\n      return new query_1.default(this, validationResults.validParams);\n    } else {\n      throw new Error('Airtable: the parameter for `select` should be a plain object or undefined.');\n    }\n  };\n\n  Table.prototype._urlEncodedNameOrId = function () {\n    return this.id || encodeURIComponent(this.name);\n  };\n\n  Table.prototype._createRecords = function (recordsData, optionalParameters, done) {\n    var _this = this;\n\n    var isCreatingMultipleRecords = Array.isArray(recordsData);\n\n    if (!done) {\n      done = optionalParameters;\n      optionalParameters = {};\n    }\n\n    var requestData;\n\n    if (isCreatingMultipleRecords) {\n      requestData = __assign({\n        records: recordsData\n      }, optionalParameters);\n    } else {\n      requestData = __assign({\n        fields: recordsData\n      }, optionalParameters);\n    }\n\n    this._base.runAction('post', \"/\" + this._urlEncodedNameOrId() + \"/\", {}, requestData, function (err, resp, body) {\n      if (err) {\n        done(err);\n        return;\n      }\n\n      var result;\n\n      if (isCreatingMultipleRecords) {\n        result = body.records.map(function (record) {\n          return new record_1.default(_this, record.id, record);\n        });\n      } else {\n        result = new record_1.default(_this, body.id, body);\n      }\n\n      done(null, result);\n    });\n  };\n\n  Table.prototype._updateRecords = function (isDestructiveUpdate, recordsDataOrRecordId, recordDataOrOptsOrDone, optsOrDone, done) {\n    var _this = this;\n\n    var opts;\n\n    if (Array.isArray(recordsDataOrRecordId)) {\n      var recordsData = recordsDataOrRecordId;\n      opts = isPlainObject_1.default(recordDataOrOptsOrDone) ? recordDataOrOptsOrDone : {};\n      done = optsOrDone || recordDataOrOptsOrDone;\n      var method = isDestructiveUpdate ? 'put' : 'patch';\n\n      var requestData = __assign({\n        records: recordsData\n      }, opts);\n\n      this._base.runAction(method, \"/\" + this._urlEncodedNameOrId() + \"/\", {}, requestData, function (err, resp, body) {\n        if (err) {\n          done(err);\n          return;\n        }\n\n        var result = body.records.map(function (record) {\n          return new record_1.default(_this, record.id, record);\n        });\n        done(null, result);\n      });\n    } else {\n      var recordId = recordsDataOrRecordId;\n      var recordData = recordDataOrOptsOrDone;\n      opts = isPlainObject_1.default(optsOrDone) ? optsOrDone : {};\n      done = done || optsOrDone;\n      var record = new record_1.default(this, recordId);\n\n      if (isDestructiveUpdate) {\n        record.putUpdate(recordData, opts, done);\n      } else {\n        record.patchUpdate(recordData, opts, done);\n      }\n    }\n  };\n\n  Table.prototype._destroyRecord = function (recordIdsOrId, done) {\n    var _this = this;\n\n    if (Array.isArray(recordIdsOrId)) {\n      var queryParams = {\n        records: recordIdsOrId\n      };\n\n      this._base.runAction('delete', \"/\" + this._urlEncodedNameOrId(), queryParams, null, function (err, response, results) {\n        if (err) {\n          done(err);\n          return;\n        }\n\n        var records = results.records.map(function (_a) {\n          var id = _a.id;\n          return new record_1.default(_this, id, null);\n        });\n        done(null, records);\n      });\n    } else {\n      var record = new record_1.default(this, recordIdsOrId);\n      record.destroy(done);\n    }\n  };\n\n  Table.prototype._listRecords = function (limit, offset, opts, done) {\n    var _this = this;\n\n    if (!done) {\n      done = opts;\n      opts = {};\n    }\n\n    var listRecordsParameters = __assign({\n      limit: limit,\n      offset: offset\n    }, opts);\n\n    this._base.runAction('get', \"/\" + this._urlEncodedNameOrId() + \"/\", listRecordsParameters, null, function (err, response, results) {\n      if (err) {\n        done(err);\n        return;\n      }\n\n      var records = results.records.map(function (recordJson) {\n        return new record_1.default(_this, null, recordJson);\n      });\n      done(null, records, results.offset);\n    });\n  };\n\n  Table.prototype._forEachRecord = function (opts, callback, done) {\n    var _this = this;\n\n    if (arguments.length === 2) {\n      done = callback;\n      callback = opts;\n      opts = {};\n    }\n\n    var limit = Table.__recordsPerPageForIteration || 100;\n    var offset = null;\n\n    var nextPage = function () {\n      _this._listRecords(limit, offset, opts, function (err, page, newOffset) {\n        if (err) {\n          done(err);\n          return;\n        }\n\n        for (var index = 0; index < page.length; index++) {\n          callback(page[index]);\n        }\n\n        if (newOffset) {\n          offset = newOffset;\n          nextPage();\n        } else {\n          done();\n        }\n      });\n    };\n\n    nextPage();\n  };\n\n  return Table;\n}();\n\nmodule.exports = Table;","map":null,"metadata":{},"sourceType":"script"}