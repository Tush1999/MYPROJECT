{"ast":null,"code":"var _jsxFileName = \"/home/tushar/Desktop/Vinsol/My Project/b/src/Components/Employees/AirTable.js\";\nimport React, { Component } from \"react\";\nimport Airtable from \"airtable\";\nimport ShowData from \"./ShowData\";\nimport \"./style.css\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst base = new Airtable({\n  apiKey: \"keyHHrGcNLiewGh05\"\n}).base(\"appnnQqeeXZmvVJvB\");\nexport default class AirTable extends Component {\n  constructor() {\n    super();\n\n    this.fetchData = () => {\n      console.log(this.props.search, \"search\");\n      let pIdentifier = `'${this.props.search}'`;\n      base(\"Imported table\").select({\n        view: \"Grid view\",\n        filterByFormula: \"SEARCH(\" + pIdentifier + \",{Participant Identifier})\",\n        pageSize: 20\n      }).eachPage((records, fetchNextPage) => {\n        let array = records.map(record => ({\n          pName: record.fields[\"Participant Name\"],\n          pId: record.fields[\"Participant Identifier\"]\n        }));\n        this.setState({\n          data: [...array, ...this.state.data],\n          nextList: fetchNextPage,\n          arr: array\n        });\n      });\n    };\n\n    this.handleClick = () => {\n      this.state.nextList();\n    };\n\n    this.state = {\n      data: [],\n      nextList: \"\",\n      search: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate() {\n    //console.log(\"updte\")\n    //console.log(this.props.search,\"props\")\n    //console.log(this.state.search,\"state\")\n    if (this.props.search !== this.state.search) {\n      this.setState({\n        search: this.props.search\n      });\n      this.fetchData();\n    }\n  }\n\n  render() {\n    //console.log(this.props.search,\"hedrdd\")\n    const result = [];\n    const map = new Map();\n\n    for (const item of this.state.data) {\n      if (!map.has(item.pName)) {\n        map.set(item.pName, true);\n        result.push({\n          pName: item.pName,\n          pId: item.pId\n        });\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"scrollableDiv\",\n        children: /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n          dataLength: this.state.data.length,\n          next: this.handleClick,\n          hasMore: true,\n          loader: true ? /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 28\n          }, this) : null,\n          children: /*#__PURE__*/_jsxDEV(ShowData, {\n            data: result\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}","map":{"version":3,"sources":["/home/tushar/Desktop/Vinsol/My Project/b/src/Components/Employees/AirTable.js"],"names":["React","Component","Airtable","ShowData","InfiniteScroll","base","apiKey","AirTable","constructor","fetchData","console","log","props","search","pIdentifier","select","view","filterByFormula","pageSize","eachPage","records","fetchNextPage","array","map","record","pName","fields","pId","setState","data","state","nextList","arr","handleClick","componentDidMount","componentDidUpdate","render","result","Map","item","has","set","push","length"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Airtable from \"airtable\";\nimport ShowData from \"./ShowData\";\nimport \"./style.css\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst base = new Airtable({ apiKey: \"keyHHrGcNLiewGh05\" }).base(\n  \"appnnQqeeXZmvVJvB\"\n);\nexport default class AirTable extends Component {\n  constructor() {\n    super();\n    this.state = { data: [], nextList: \"\",search:\"\" };\n  }\n  componentDidMount() {\n    this.fetchData();\n  }\n  componentDidUpdate(){\n    //console.log(\"updte\")\n    //console.log(this.props.search,\"props\")\n    //console.log(this.state.search,\"state\")\n    if(this.props.search!==this.state.search){\n    this.setState({search:this.props.search})\n    this.fetchData()\n    }\n  }\n  fetchData = () => {\n    console.log(this.props.search, \"search\");\n    let pIdentifier=`'${this.props.search}'`;\n    base(\"Imported table\")\n      .select({\n        view: \"Grid view\",\n        filterByFormula:\"SEARCH(\" + pIdentifier + \",{Participant Identifier})\",\n        pageSize: 20,\n      })\n      .eachPage((records, fetchNextPage) => {\n        let array = records.map((record) => ({\n          pName: record.fields[\"Participant Name\"],\n          pId: record.fields[\"Participant Identifier\"],\n        }));\n        this.setState({\n          data: [...array, ...this.state.data],\n          nextList: fetchNextPage,\n          arr: array,\n        });\n      });\n  };\n  handleClick = () => {\n    this.state.nextList();\n  };\n\n  render() {\n    //console.log(this.props.search,\"hedrdd\")\n    const result = [];\n    const map = new Map();\n    for (const item of this.state.data) {\n      if (!map.has(item.pName)) {\n        map.set(item.pName, true);\n        result.push({\n          pName: item.pName,\n          pId: item.pId,\n        });\n      }\n    }\n    return (\n      <>\n        <div id=\"scrollableDiv\">\n          <InfiniteScroll\n            dataLength={this.state.data.length}\n            next={this.handleClick}\n            hasMore={true}\n            loader={true ? <h4>Loading...</h4> : null}\n          >\n            <ShowData data={result} />\n          </InfiniteScroll>\n        </div>\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}