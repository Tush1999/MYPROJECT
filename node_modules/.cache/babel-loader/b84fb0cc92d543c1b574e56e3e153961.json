{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar get_1 = __importDefault(require(\"lodash/get\"));\n\nvar isPlainObject_1 = __importDefault(require(\"lodash/isPlainObject\"));\n\nvar keys_1 = __importDefault(require(\"lodash/keys\"));\n\nvar fetch_1 = __importDefault(require(\"./fetch\"));\n\nvar abort_controller_1 = __importDefault(require(\"./abort-controller\"));\n\nvar object_to_query_param_string_1 = __importDefault(require(\"./object_to_query_param_string\"));\n\nvar airtable_error_1 = __importDefault(require(\"./airtable_error\"));\n\nvar table_1 = __importDefault(require(\"./table\"));\n\nvar http_headers_1 = __importDefault(require(\"./http_headers\"));\n\nvar run_action_1 = __importDefault(require(\"./run_action\"));\n\nvar package_version_1 = __importDefault(require(\"./package_version\"));\n\nvar exponential_backoff_with_jitter_1 = __importDefault(require(\"./exponential_backoff_with_jitter\"));\n\nvar userAgent = \"Airtable.js/\" + package_version_1.default;\n\nvar Base = function () {\n  function Base(airtable, baseId) {\n    this._airtable = airtable;\n    this._id = baseId;\n  }\n\n  Base.prototype.table = function (tableName) {\n    return new table_1.default(this, null, tableName);\n  };\n\n  Base.prototype.makeRequest = function (options) {\n    var _this = this;\n\n    var _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var method = get_1.default(options, 'method', 'GET').toUpperCase();\n    var url = this._airtable._endpointUrl + \"/v\" + this._airtable._apiVersionMajor + \"/\" + this._id + get_1.default(options, 'path', '/') + \"?\" + object_to_query_param_string_1.default(get_1.default(options, 'qs', {}));\n    var controller = new abort_controller_1.default();\n\n    var headers = this._getRequestHeaders(Object.assign({}, this._airtable._customHeaders, (_a = options.headers) !== null && _a !== void 0 ? _a : {}));\n\n    var requestOptions = {\n      method: method,\n      headers: headers,\n      signal: controller.signal\n    };\n\n    if ('body' in options && _canRequestMethodIncludeBody(method)) {\n      requestOptions.body = JSON.stringify(options.body);\n    }\n\n    var timeout = setTimeout(function () {\n      controller.abort();\n    }, this._airtable._requestTimeout);\n    return new Promise(function (resolve, reject) {\n      fetch_1.default(url, requestOptions).then(function (resp) {\n        clearTimeout(timeout);\n\n        if (resp.status === 429 && !_this._airtable._noRetryIfRateLimited) {\n          var numAttempts_1 = get_1.default(options, '_numAttempts', 0);\n          var backoffDelayMs = exponential_backoff_with_jitter_1.default(numAttempts_1);\n          setTimeout(function () {\n            var newOptions = __assign(__assign({}, options), {\n              _numAttempts: numAttempts_1 + 1\n            });\n\n            _this.makeRequest(newOptions).then(resolve).catch(reject);\n          }, backoffDelayMs);\n        } else {\n          resp.json().then(function (body) {\n            var err = _this._checkStatusForError(resp.status, body) || _getErrorForNonObjectBody(resp.status, body);\n\n            if (err) {\n              reject(err);\n            } else {\n              resolve({\n                statusCode: resp.status,\n                headers: resp.headers,\n                body: body\n              });\n            }\n          }).catch(function () {\n            var err = _getErrorForNonObjectBody(resp.status);\n\n            reject(err);\n          });\n        }\n      }).catch(function (err) {\n        clearTimeout(timeout);\n        err = new airtable_error_1.default('CONNECTION_ERROR', err.message, null);\n        reject(err);\n      });\n    });\n  };\n  /**\n   * @deprecated This method is deprecated.\n   */\n\n\n  Base.prototype.runAction = function (method, path, queryParams, bodyData, callback) {\n    run_action_1.default(this, method, path, queryParams, bodyData, callback, 0);\n  };\n\n  Base.prototype._getRequestHeaders = function (headers) {\n    var result = new http_headers_1.default();\n    result.set('Authorization', \"Bearer \" + this._airtable._apiKey);\n    result.set('User-Agent', userAgent);\n    result.set('Content-Type', 'application/json');\n\n    for (var _i = 0, _a = keys_1.default(headers); _i < _a.length; _i++) {\n      var headerKey = _a[_i];\n      result.set(headerKey, headers[headerKey]);\n    }\n\n    return result.toJSON();\n  };\n\n  Base.prototype._checkStatusForError = function (statusCode, body) {\n    var _a = (body !== null && body !== void 0 ? body : {\n      error: {}\n    }).error,\n        error = _a === void 0 ? {} : _a;\n    var type = error.type,\n        message = error.message;\n\n    if (statusCode === 401) {\n      return new airtable_error_1.default('AUTHENTICATION_REQUIRED', 'You should provide valid api key to perform this operation', statusCode);\n    } else if (statusCode === 403) {\n      return new airtable_error_1.default('NOT_AUTHORIZED', 'You are not authorized to perform this operation', statusCode);\n    } else if (statusCode === 404) {\n      return new airtable_error_1.default('NOT_FOUND', message !== null && message !== void 0 ? message : 'Could not find what you are looking for', statusCode);\n    } else if (statusCode === 413) {\n      return new airtable_error_1.default('REQUEST_TOO_LARGE', 'Request body is too large', statusCode);\n    } else if (statusCode === 422) {\n      return new airtable_error_1.default(type !== null && type !== void 0 ? type : 'UNPROCESSABLE_ENTITY', message !== null && message !== void 0 ? message : 'The operation cannot be processed', statusCode);\n    } else if (statusCode === 429) {\n      return new airtable_error_1.default('TOO_MANY_REQUESTS', 'You have made too many requests in a short period of time. Please retry your request later', statusCode);\n    } else if (statusCode === 500) {\n      return new airtable_error_1.default('SERVER_ERROR', 'Try again. If the problem persists, contact support.', statusCode);\n    } else if (statusCode === 503) {\n      return new airtable_error_1.default('SERVICE_UNAVAILABLE', 'The service is temporarily unavailable. Please retry shortly.', statusCode);\n    } else if (statusCode >= 400) {\n      return new airtable_error_1.default(type !== null && type !== void 0 ? type : 'UNEXPECTED_ERROR', message !== null && message !== void 0 ? message : 'An unexpected error occurred', statusCode);\n    } else {\n      return null;\n    }\n  };\n\n  Base.prototype.doCall = function (tableName) {\n    return this.table(tableName);\n  };\n\n  Base.prototype.getId = function () {\n    return this._id;\n  };\n\n  Base.createFunctor = function (airtable, baseId) {\n    var base = new Base(airtable, baseId);\n\n    var baseFn = function (tableName) {\n      return base.doCall(tableName);\n    };\n\n    baseFn._base = base;\n    baseFn.table = base.table.bind(base);\n    baseFn.makeRequest = base.makeRequest.bind(base);\n    baseFn.runAction = base.runAction.bind(base);\n    baseFn.getId = base.getId.bind(base);\n    return baseFn;\n  };\n\n  return Base;\n}();\n\nfunction _canRequestMethodIncludeBody(method) {\n  return method !== 'GET' && method !== 'DELETE';\n}\n\nfunction _getErrorForNonObjectBody(statusCode, body) {\n  if (isPlainObject_1.default(body)) {\n    return null;\n  } else {\n    return new airtable_error_1.default('UNEXPECTED_ERROR', 'The response from Airtable was invalid JSON. Please try again soon.', statusCode);\n  }\n}\n\nmodule.exports = Base;","map":null,"metadata":{},"sourceType":"script"}