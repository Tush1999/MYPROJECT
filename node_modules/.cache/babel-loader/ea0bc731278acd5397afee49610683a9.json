{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar isFunction_1 = __importDefault(require(\"lodash/isFunction\"));\n\nvar keys_1 = __importDefault(require(\"lodash/keys\"));\n\nvar record_1 = __importDefault(require(\"./record\"));\n\nvar callback_to_promise_1 = __importDefault(require(\"./callback_to_promise\"));\n\nvar has_1 = __importDefault(require(\"./has\"));\n\nvar query_params_1 = require(\"./query_params\");\n/**\n * Builds a query object. Won't fetch until `firstPage` or\n * or `eachPage` is called.\n *\n * Params should be validated prior to being passed to Query\n * with `Query.validateParams`.\n */\n\n\nvar Query = function () {\n  function Query(table, params) {\n    this._table = table;\n    this._params = params;\n    this.firstPage = callback_to_promise_1.default(firstPage, this);\n    this.eachPage = callback_to_promise_1.default(eachPage, this, 1);\n    this.all = callback_to_promise_1.default(all, this);\n  }\n  /**\n   * Validates the parameters for passing to the Query constructor.\n   *\n   * @params {object} params parameters to validate\n   *\n   * @return an object with two keys:\n   *  validParams: the object that should be passed to the constructor.\n   *  ignoredKeys: a list of keys that will be ignored.\n   *  errors: a list of error messages.\n   */\n\n\n  Query.validateParams = function (params) {\n    var validParams = {};\n    var ignoredKeys = [];\n    var errors = [];\n\n    for (var _i = 0, _a = keys_1.default(params); _i < _a.length; _i++) {\n      var key = _a[_i];\n      var value = params[key];\n\n      if (has_1.default(Query.paramValidators, key)) {\n        var validator = Query.paramValidators[key];\n        var validationResult = validator(value);\n\n        if (validationResult.pass) {\n          validParams[key] = value;\n        } else {\n          errors.push(validationResult.error);\n        }\n      } else {\n        ignoredKeys.push(key);\n      }\n    }\n\n    return {\n      validParams: validParams,\n      ignoredKeys: ignoredKeys,\n      errors: errors\n    };\n  };\n\n  Query.paramValidators = query_params_1.paramValidators;\n  return Query;\n}();\n/**\n * Fetches the first page of results for the query asynchronously,\n * then calls `done(error, records)`.\n */\n\n\nfunction firstPage(done) {\n  if (!isFunction_1.default(done)) {\n    throw new Error('The first parameter to `firstPage` must be a function');\n  }\n\n  this.eachPage(function (records) {\n    done(null, records);\n  }, function (error) {\n    done(error, null);\n  });\n}\n/**\n * Fetches each page of results for the query asynchronously.\n *\n * Calls `pageCallback(records, fetchNextPage)` for each\n * page. You must call `fetchNextPage()` to fetch the next page of\n * results.\n *\n * After fetching all pages, or if there's an error, calls\n * `done(error)`.\n */\n\n\nfunction eachPage(pageCallback, done) {\n  var _this = this;\n\n  if (!isFunction_1.default(pageCallback)) {\n    throw new Error('The first parameter to `eachPage` must be a function');\n  }\n\n  if (!isFunction_1.default(done) && done !== void 0) {\n    throw new Error('The second parameter to `eachPage` must be a function or undefined');\n  }\n\n  var path = \"/\" + this._table._urlEncodedNameOrId();\n\n  var params = __assign({}, this._params);\n\n  var inner = function () {\n    _this._table._base.runAction('get', path, params, null, function (err, response, result) {\n      if (err) {\n        done(err, null);\n      } else {\n        var next = void 0;\n\n        if (result.offset) {\n          params.offset = result.offset;\n          next = inner;\n        } else {\n          next = function () {\n            done(null);\n          };\n        }\n\n        var records = result.records.map(function (recordJson) {\n          return new record_1.default(_this._table, null, recordJson);\n        });\n        pageCallback(records, next);\n      }\n    });\n  };\n\n  inner();\n}\n/**\n * Fetches all pages of results asynchronously. May take a long time.\n */\n\n\nfunction all(done) {\n  if (!isFunction_1.default(done)) {\n    throw new Error('The first parameter to `all` must be a function');\n  }\n\n  var allRecords = [];\n  this.eachPage(function (pageRecords, fetchNextPage) {\n    allRecords.push.apply(allRecords, pageRecords);\n    fetchNextPage();\n  }, function (err) {\n    if (err) {\n      done(err, null);\n    } else {\n      done(null, allRecords);\n    }\n  });\n}\n\nmodule.exports = Query;","map":null,"metadata":{},"sourceType":"script"}