{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar callback_to_promise_1 = __importDefault(require(\"./callback_to_promise\"));\n\nvar Record = function () {\n  function Record(table, recordId, recordJson) {\n    this._table = table;\n    this.id = recordId || recordJson.id;\n    this.setRawJson(recordJson);\n    this.save = callback_to_promise_1.default(save, this);\n    this.patchUpdate = callback_to_promise_1.default(patchUpdate, this);\n    this.putUpdate = callback_to_promise_1.default(putUpdate, this);\n    this.destroy = callback_to_promise_1.default(destroy, this);\n    this.fetch = callback_to_promise_1.default(fetch, this);\n    this.updateFields = this.patchUpdate;\n    this.replaceFields = this.putUpdate;\n  }\n\n  Record.prototype.getId = function () {\n    return this.id;\n  };\n\n  Record.prototype.get = function (columnName) {\n    return this.fields[columnName];\n  };\n\n  Record.prototype.set = function (columnName, columnValue) {\n    this.fields[columnName] = columnValue;\n  };\n\n  Record.prototype.setRawJson = function (rawJson) {\n    this._rawJson = rawJson;\n    this.fields = this._rawJson && this._rawJson.fields || {};\n  };\n\n  return Record;\n}();\n\nfunction save(done) {\n  this.putUpdate(this.fields, done);\n}\n\nfunction patchUpdate(cellValuesByName, opts, done) {\n  var _this = this;\n\n  if (!done) {\n    done = opts;\n    opts = {};\n  }\n\n  var updateBody = __assign({\n    fields: cellValuesByName\n  }, opts);\n\n  this._table._base.runAction('patch', \"/\" + this._table._urlEncodedNameOrId() + \"/\" + this.id, {}, updateBody, function (err, response, results) {\n    if (err) {\n      done(err);\n      return;\n    }\n\n    _this.setRawJson(results);\n\n    done(null, _this);\n  });\n}\n\nfunction putUpdate(cellValuesByName, opts, done) {\n  var _this = this;\n\n  if (!done) {\n    done = opts;\n    opts = {};\n  }\n\n  var updateBody = __assign({\n    fields: cellValuesByName\n  }, opts);\n\n  this._table._base.runAction('put', \"/\" + this._table._urlEncodedNameOrId() + \"/\" + this.id, {}, updateBody, function (err, response, results) {\n    if (err) {\n      done(err);\n      return;\n    }\n\n    _this.setRawJson(results);\n\n    done(null, _this);\n  });\n}\n\nfunction destroy(done) {\n  var _this = this;\n\n  this._table._base.runAction('delete', \"/\" + this._table._urlEncodedNameOrId() + \"/\" + this.id, {}, null, function (err) {\n    if (err) {\n      done(err);\n      return;\n    }\n\n    done(null, _this);\n  });\n}\n\nfunction fetch(done) {\n  var _this = this;\n\n  this._table._base.runAction('get', \"/\" + this._table._urlEncodedNameOrId() + \"/\" + this.id, {}, null, function (err, response, results) {\n    if (err) {\n      done(err);\n      return;\n    }\n\n    _this.setRawJson(results);\n\n    done(null, _this);\n  });\n}\n\nmodule.exports = Record;","map":null,"metadata":{},"sourceType":"script"}