{"ast":null,"code":"var _jsxFileName = \"/home/tushar/Desktop/Vinsol/My Project/b/src/Components/Conference/Conferences.js\";\nimport React, { Component } from \"react\";\nimport { NavLink, withRouter } from \"react-router-dom\";\nimport Airtable from \"airtable\";\nimport AirTable from \"../Employees/AirTable\";\nimport \"./style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst base = new Airtable({\n  apiKey: \"keyHHrGcNLiewGh05\"\n}).base(\"appnnQqeeXZmvVJvB\");\n\nclass Conferences extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      conference: []\n    };\n  }\n\n  componentDidMount() {\n    base(\"Imported table\").select({\n      view: \"Grid view\"\n    }).eachPage((records, fetchNextPage) => {\n      let arr1 = records.map(record => ({\n        id: record.fields[\"Conference ID\"],\n        date: record.fields[\"Date\"]\n      }));\n      const result = [];\n      const map = new Map();\n\n      for (const item of arr1) {\n        if (!map.has(item.id)) {\n          map.set(item.id, true);\n          result.push({\n            id: item.id,\n            date: item.date\n          });\n        }\n      }\n\n      this.setState({\n        conference: result\n      });\n      fetchNextPage();\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(AirTable, {\n        type: \"employees\",\n        search: \"\",\n        pageSize: 20,\n        view: \"Grid-view\",\n        field1: \"Conference ID\",\n        field2: \"Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default _c = withRouter(Conferences);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/home/tushar/Desktop/Vinsol/My Project/b/src/Components/Conference/Conferences.js"],"names":["React","Component","NavLink","withRouter","Airtable","AirTable","base","apiKey","Conferences","constructor","props","state","conference","componentDidMount","select","view","eachPage","records","fetchNextPage","arr1","map","record","id","fields","date","result","Map","item","has","set","push","setState","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,kBAApC;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAO,aAAP;;;AAEA,MAAMC,IAAI,GAAG,IAAIF,QAAJ,CAAa;AAAEG,EAAAA,MAAM,EAAE;AAAV,CAAb,EAA8CD,IAA9C,CACX,mBADW,CAAb;;AAIA,MAAME,WAAN,SAA0BP,SAA1B,CAAoC;AAClCQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAb;AACD;;AACDC,EAAAA,iBAAiB,GAAG;AAClBP,IAAAA,IAAI,CAAC,gBAAD,CAAJ,CACGQ,MADH,CACU;AACNC,MAAAA,IAAI,EAAE;AADA,KADV,EAIGC,QAJH,CAIY,CAACC,OAAD,EAAUC,aAAV,KAA4B;AACpC,UAAIC,IAAI,GAAGF,OAAO,CAACG,GAAR,CAAaC,MAAD,KAAa;AAClCC,QAAAA,EAAE,EAAED,MAAM,CAACE,MAAP,CAAc,eAAd,CAD8B;AAElCC,QAAAA,IAAI,EAAEH,MAAM,CAACE,MAAP,CAAc,MAAd;AAF4B,OAAb,CAAZ,CAAX;AAIA,YAAME,MAAM,GAAG,EAAf;AACA,YAAML,GAAG,GAAG,IAAIM,GAAJ,EAAZ;;AACA,WAAK,MAAMC,IAAX,IAAmBR,IAAnB,EAAyB;AACvB,YAAI,CAACC,GAAG,CAACQ,GAAJ,CAAQD,IAAI,CAACL,EAAb,CAAL,EAAuB;AACrBF,UAAAA,GAAG,CAACS,GAAJ,CAAQF,IAAI,CAACL,EAAb,EAAiB,IAAjB;AACAG,UAAAA,MAAM,CAACK,IAAP,CAAY;AACVR,YAAAA,EAAE,EAAEK,IAAI,CAACL,EADC;AAEVE,YAAAA,IAAI,EAAEG,IAAI,CAACH;AAFD,WAAZ;AAID;AACF;;AACD,WAAKO,QAAL,CAAc;AAAEnB,QAAAA,UAAU,EAAEa;AAAd,OAAd;AACAP,MAAAA,aAAa;AACd,KAtBH;AAuBD;;AAEDc,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,6BAYA,QAAC,QAAD;AACI,QAAA,IAAI,EAAC,WADT;AAEI,QAAA,MAAM,EAAC,EAFX;AAGI,QAAA,QAAQ,EAAE,EAHd;AAII,QAAA,IAAI,EAAE,WAJV;AAKI,QAAA,MAAM,EAAC,eALX;AAMI,QAAA,MAAM,EAAC;AANX;AAAA;AAAA;AAAA;AAAA;AAZA,qBADF;AAuBD;;AAvDiC;;AAyDpC,oBAAe7B,UAAU,CAACK,WAAD,CAAzB","sourcesContent":["import React, { Component } from \"react\";\nimport { NavLink, withRouter } from \"react-router-dom\";\nimport Airtable from \"airtable\";\nimport AirTable from \"../Employees/AirTable\";\nimport \"./style.css\";\n\nconst base = new Airtable({ apiKey: \"keyHHrGcNLiewGh05\" }).base(\n  \"appnnQqeeXZmvVJvB\"\n);\n\nclass Conferences extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { conference: [] };\n  }\n  componentDidMount() {\n    base(\"Imported table\")\n      .select({\n        view: \"Grid view\",\n      })\n      .eachPage((records, fetchNextPage) => {\n        let arr1 = records.map((record) => ({\n          id: record.fields[\"Conference ID\"],\n          date: record.fields[\"Date\"],\n        }));\n        const result = [];\n        const map = new Map();\n        for (const item of arr1) {\n          if (!map.has(item.id)) {\n            map.set(item.id, true); \n            result.push({\n              id: item.id,\n              date: item.date,\n            });\n          }\n        }\n        this.setState({ conference: result });\n        fetchNextPage();\n      });\n  }\n\n  render() {\n    return (\n      <>\n      {/* <div className=\"conference-div\">\n        {this.state.conference.map((value,index) => (\n          <div className=\"card\" key={index}>\n            <div className=\"card-body\">\n              <NavLink to={`/conference/${value.id}`} className=\"link-conference\">\n                Conference ID- {value.id} <b>{value.date}</b>\n              </NavLink>\n            </div>\n          </div>\n        ))}\n      </div> */}\n      <AirTable\n          type=\"employees\"\n          search=\"\"\n          pageSize={20}\n          view={\"Grid-view\"}\n          field1=\"Conference ID\"\n          field2=\"Date\"\n        />\n     </>\n    );\n  }\n}\nexport default withRouter(Conferences);\n"]},"metadata":{},"sourceType":"module"}